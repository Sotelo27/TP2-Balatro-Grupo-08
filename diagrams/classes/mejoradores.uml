
class Efecto{
    - puntos : Int
    - multiplicador : Int
    - mejoras : List<Mejora>
    + Efecto()
    + Efecto(puntos)
    + Efecto(puntos, multiplicador)
    + aplicarAPuntaje(Puntaje puntaje)
    + recibirMejora(mejora mejora)
}
class Descarte {
  -  cartas :List <CartaDePoker>
  - efectoDeModificadores : Efecto 
  - List<CartaDePoker> cartasDescartadas
  + Descarte(List<CartaDePoker> cartasDescartadas)
  + calcularPuntaje() : PuntajeJugada
}
class Jugada {
  -  cartas :List <CartaDePoker>
  -  combinacion  :CombinacionDePoker
  - efectoDeModificadores : Efecto 
  -  verificador :Verificador
  + Jugada(List<Carta> cartas)
  + aplicarTarots(List<Tarot> tarotsActivos)
  + calcularPuntaje() : PuntajeJugada
}

abstract CombinacionDePoker{

    - nombre: String 
    - efecto: Efecto
    - cartas: List <CartaDePoker> 
    + recibirMejora(Mejora mejora)
    + aplicarAPuntajeJugada(PuntajeJugada puntaje)
    {abstract} + tieneNombre(string nombre): bool
}

class CartaDePoker{
 - numero: int
 - efecto: Efecto         
 - palo: String           
 - estado: EstadoDeCarta  
 - nombre: String         
 # ORDEN_NUMEROS: List<String> 
 + CartaDePoker()         
 + setPuntos(puntos: int): void    
 + changeState(estadoDeCarta: EstadoDeCarta): void                  
+ aplicarAPuntajeJugada(PuntajeJugada puntaje)

}

interface IMejorador {
  {abstract}+ mejorar( IMejorable mejorable)
}

class CombinacionDeComodines{
  - nombre : string 
  - descripcion : string 
  + CombinacionDeComodines(nombre, descripcion, List<Comodin>)
}
Class CartaDeTarot implements IMejorador{
    - nombre : string 
    - descripcion : string 
    + Tarot(nombre, descripcion, IMejora mejora, ICondicion condicion)
}


class Comodin implements IMejorador{
    - nombre : string 
    - descripcion : string
    + aplicarEfecto(IMejorable mejorable) :
    + Comodin(nombre, descripcion, IMejora mejora, ICondicion condicion)
}

class ActivarAlAzar implements ICondicion{
    - probabilidad: int 
    + ActivarAlAzar(int probabilidad)
}


class RestriccionACarta implements ICondicion{
    - contexto : string 
    - elemento : string 
    + RestriccionACarta(String nombreDeLaCarta)
}
class RestriccionACombinacion implements ICondicion{
    - contexto : string 
    - elemento : string 
    + RestriccionACombinacion(string combinacion)
}
class SinRestriccion implements ICondicion{
    + SinRestriccion()
}
class EsDescarte implements ICondicion{
    - contexto : string 
    - elemento : string 
    + EsDescarte()
    + EsDescarte(string elemento)
}
class EsUnaJugada implements ICondicion{
    - contexto : string 
    - elemento : string 
    + EsUnaJugada(string elemento)
}

interface IMejorable{
  {abstract}+ siContieneAplicarMejora(string contexto, string elemento, Mejora mejora)
  {abstract}+ recibirMejora(Mejora mejora)
}

interface IMejora{
  {abstract}  + aplicarAPuntaje(PuntajeJugada puntaje)
}

interface ICondicion {
    {abstract}+ aplicarMejora(IMejorable mejorable, Mejora mejora)
}

CombinacionDePoker ..|> IMejorable 
CombinacionDeComodines o-- "1..2" Comodin 
IMejorador <|. CombinacionDeComodines
IMejora --o CartaDeTarot
Descarte ..|> IMejorable
CartaDePoker ..|> IMejorable
IMejora  --o Comodin 
Jugada ..|> IMejorable
CartaDeTarot o-- ICondicion
Comodin o-- ICondicion
IMejorable <.. IMejorador : conoce

Efecto --o Descarte
Efecto --o CombinacionDePoker
Efecto --o CartaDePoker
Efecto --o Jugada

@enduml


@enduml

@startuml

class Jugada{
    + Jugada(List<Carta> cartas)
    + calculcarPuntaje() : PuntajeJugada
}
class Descarte{}
class Carta{
}
Descarte ..|> IMejorable
Carta ..|> IMejorable
Jugada ..|> IMejorable
CombinacionDePoker ..|> IMejorable

Descarte ..|> IAccion
Jugada ..|> IAccion
interface IAccion {
  + actualizarJugadasRestantes(Int jugadasRestantes)
  + actualizarDescartesRestantes(Int DescartesRestantes)
}

interface IMejorable{
  + aplicarEfecto(Efecto efecto) 
}
class Comodin implements IMejorador{
    - nombre : string 
    - descripcion : string
}

Class Tarot implements IMejorador{
    - nombre : string 
    - descripcion : string 
}

interface IMejorador {
  + mejorar( IMejorable mejorable)
}

Jugador o- "0..5" IMejorador
IAccion <-- Comodin
class Comodin {
    + aplicarEfecto(IAccion accion) :
}
class Efecto{
    - puntos : Int
    - multiplicador: int 
    + calcularPuntaje(int puntosBase, int multiplicadorBase)
    + agregarEfecto(Efecto otroEfecto)
}

Comodin o-- ICondicion 
Comodin o- Efecto

class ActivarAlAzar implements ICondicion{
    - probabilidad: int 
    + ActivarAlAzar(int probabilidad)
}
class EsDescarte implements ICondicion{

}
class EsUnaJugada implements ICondicion{
    
}
IRestriccion --o EsUnaJugada
interface ICondicion {
    + aplicarEfecto(IAccion accion, Efecto efecto)
}

@enduml 
IMejorable <.. IMejorador 
Tarot o-- IRestriccion

Efecto -o Tarot
class SoloCartas implements IRestriccion{
    - restriccion : string 
}
class soloCombinacion implements IRestriccion{
    - restriccion: Combinacion
}
interface IRestriccion{
    + validarRestriccion(Mejorable mejorable): bool
}


@enduml
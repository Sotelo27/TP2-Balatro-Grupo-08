
class Efecto{
    - puntos : Int
    - multiplicador : Int
    - mejoras : List<Mejora>
    + Efecto(puntos, multiplicador)
    + Efecto(puntos, multiplicador, multiplicadorDeMultiplicador)
    + aplicarAPuntaje(Puntaje puntaje)
    + recibirMejora(mejora mejora)
}
interface IMejora{
  {abstract}  + aplicarAPuntaje(PuntajeJugada puntaje)
}
class PuntajeJugada{
  - puntos : Int
  - multiplicador: int 
  - fichas: int
  + Puntaje()
  + Puntaje(Int puntos,Int multiplicador)
  + sumarFichas(int cantidad)
  + sumarPuntos(Int cantidad)
  + sumarAMultiplicador(Int cantidad)
  + multiplicarPuntos(Int cantidad)
  + multiplicarMultiplicador(int cantidad)
  + esMenorQue(Puntaje otroPuntaje): bool
}

class MultiplicaMultiplicador implements IMejora{
  - cantidad: int
}

class MultiplicaPuntos implements IMejora{
  - cantidad: int
  }

class SumaFichas implements IMejora{
  - cantidad: int
  }


class SumaAMultiplicador implements IMejora{
  - cantidad: int
  }


class SumaPuntos implements IMejora{
  - cantidad: int
  }
Efecto o- "0..*" IMejora 
IMejora .> PuntajeJugada :conoce

Comodin o-- "1..*" IMejora
Tarot o-- IMejora



class Efecto{
    - puntos : Int
    - multiplicador : Int
    - mejoras : List<Mejora>
    + Efecto(puntos, multiplicador)
    + Efecto(puntos, multiplicador, multiplicadorDeMultiplicador)
    + aplicarAPuntaje(Puntaje puntaje)
    + recibirMejora(mejora mejora)
}
interface IMejora{
  {abstract}  + aplicarAPuntaje(PuntajeJugada puntaje, int puntos, int multiplicador)
}
class PuntajeJugada{
  - puntos : Int
  - multiplicador: int 
  - fichas: int
  + Puntaje()
  + Puntaje(Int puntos,Int multiplicador)
  + sumarFichas(int cantidad)
  + sumarPuntos(Int cantidad)
  + sumarAMultiplicador(Int cantidad)
  + multiplicarPuntos(Int cantidad)
  + multiplicarMultiplicador(int cantidad)
  + esMenorQue(Puntaje otroPuntaje): bool
}

class MultiplicaMultiplicador implements IMejora{
   
}

class MultiplicaPuntos implements IMejora{
   
  }

class SumaFichas implements IMejora{
   
  }


class SumaAMultiplicador implements IMejora{
   
  }


class SumaPuntos implements IMejora{
   
  }
  
class CartaDeTarot{
    - nombre : String
    - descripcion : String
    - mejora : Mejora
    - condicionDeMejora : ICondicionDeMejora
    - sobre : String
    - ejemplar : String
}
  
class Comodin{
  -  nombre String
  -  descripcion String
  -  activacion: ICondicionMejora
  -  efecto : Mejora
  -  comodines : List<Comodin>
}
class Mejora{
  - puntos: int 
  - multiplicador : int 
  + Mejora(int puntos, int multiplicador)
}
Mejora o-- IMejora
Efecto o- "0..*" IMejora 
IMejora .> PuntajeJugada :conoce

Comodin o-- Mejora
Tarot o-- Mejora


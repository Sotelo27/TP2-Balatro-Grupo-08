@startuml

interface IMejorable 

class Ronda{
    + Ronda(int numero, int manos, int descartes, int puntajeASuperar, Tienda tienda)
}
Class Tienda{
    + mostrarCartas() : List<Carta>
    + tomarSeleccion(Ficha fichas) : Carta
}
interface IRecibible{
    + recibircarta(Carta carta)
}
interface IEntregaCartas{
    + darCarta(IRecibible irecibible)
}
Class Algo3Balatro {
    
}

class Mazo{
  - cartas: List<Carta>
  - seleccionadas: List<Carta>
  - usadas: List<Carta>
  + seleccionar(Carta unaCarta)
  + quitarDeSeleccion(Carta unaCarta)
  + realizarDescarte(Ronda unaRonda)
  + realizarJugada(Ronda unaRonda)
  - clonarCarta(Carta unaCarta)  
}

Algo3Balatro o-- "*" Ronda
Algo3Balatro o-- Jugador
Algo3Balatro o-- Mazo
Class Jugador{
  - ficha : Ficha
  + seleccionarCarta(Carta unaCarta)
  + jugarCartasSeleccionadas(Ronda ronda)
  + aplicarTarotASeleccionada(IMejorable mejorable)
  + realizarDescarteDeSeleccionada(Ronda ronda)
}
Jugador ..> IMejorable
Jugador o-- "*..5" Comodin
Jugador .> Ronda : "conoce"
Ronda o-- Tienda
Jugador o- Mazo 
Mazo o- Cartas 

abstract Cartas{
    - nombre  : string 
    + getNombre()
}
Class Ronda{
    -nro: int 
    -manos: manos 
    -descartes : int 
    + agregarAccion(IAccion accionDelJugador)
    + calcularPuntaje() : Puntaje
}
interface IAccion {
    + aplicarEfectoDeComodin(Efecto efecto )
}
IAccion <|.. Jugada 
IAccion <|.. Descarte
Jugador --> IAccion

class Descarte{
    + Descarte(Carta carta)
}
class Jugada {
    + Jugada(List<Carta> cartasSeleccionadas)
    + calcularPuntaje() : Puntaje
    - calcularPuntajePorCartas() : Puntaje 
}
Jugada --> Puntaje 
class Puntaje{
  - puntaje: Int 
  - multiplicador : Int 
  + Puntaje(Int puntosBase, Int multiplicador)
  + sumarAPuntaje(Puntaje puntaje)
  + sumar(Int puntosBase, Int multiplicador)
}
abstract Efecto {}
abstract CombinacionDePoker{}
Efecto "0..5" -o Jugada
abstract Verificador
Verificador <- CombinacionDePoker
Jugada o-- CombinacionDePoker
Ronda o-- "0..5*" IAccion
Class Jugada{
    - cartasJugadas: List<Carta>
    - comodinesActivos: List<Comodin>
}
class Comodin{
    - condicion : ICondicion
    - efecto : Efecto
    + Comodin(Efecto efecto, ICondicion condicion)
    + aplicarEfecto(IAccion accion) :
}
Class AplicarTarot implements IAccion{
    + AplicarTarot(Tarot tarot)
    + equalsTo(IAccion accion) : bool
}
@enduml
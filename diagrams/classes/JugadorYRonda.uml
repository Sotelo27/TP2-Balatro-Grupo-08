Class Tienda{
    + mostrarCartaDePoker() : List<CartaDePoker>
    + tomarSeleccion(Ficha fichas) : CartaDePoker
}

interface ITieneCartas{
  + tomarCarta() : CartaDePoker
}

class Mano{
  - cartasDePokerDisponibles: List<CartaDePoker>
  - seleccionadas: List<CartaDePoker>
  + aplicarTarots(List<Tarot>)
  + realizarDescarte(Ronda ronda)
  + realizarJugada(Ronda ronda, List<IMejorador> cartasDeTarot, List<Comodin> comodines)
  + recibirCartaDePoker(CartaDePoker carta)
  + seleccionar(CartaDePoker unaCartaDePoker)
  + quitarDeSeleccion(CartaDePoker unaCartaDePoker)
}

class Mazo{
  - CartaDePokers: List<CartaDePoker>
  - usadas: List<CartaDePoker>
  + realizarDescarte(Ronda unaRonda, Mano mano)
  - clonarCartaDePoker(CartaDePoker unaCartaDePoker)  
}

Class Algo3Balatro {
  + Algo3Balatro(String NombreJugador, LectorDeJSON lectorDeJSON)
  + iniciar()
  + seleccionarCartaDePoker(string nombreDeCarta)
  + activarTarotSobreSeleccionada(string nombreDelTarot)
  + activarComodinSobreSeleccionada(string nombreDelComodin)
  + verPuntajeDeRonda() : Puntaje
  + realizarJugada()
  + realizarDescarte()
}


Class Jugador{
    -nombre: String 
  - comodinesActivos: List<Comodin>
  - tarotsActivos: List<IMejorador> 
  + seleccionarCartaDePoker(CartaDePoker unaCartaDePoker)
  + realizarJugada(Ronda ronda)
  + activarTarot(Tarot cartaTarot)
  + activarComodin(Comodin comodin )
  + realizarDescarte(Ronda ronda)
}

Class Ronda{

  -nro: int 
  + agregarAccion(IAccion accionDelJugador)
  + calcularPuntaje() : PuntajeJugada
}

class AccionesDisponibles{
  -manos: manos 
  -descartes : int 
  + accionesDisponibles(int manos, int descartes)
  + superaLimiteDeDescartes(int descartes)
  + reducirDescartesEn(int cantidad)
  + quedanManosDisponibles():bool
  + redicirManosDisponibles()
}

interface IAccion {
  + actualizarLimites(AccionesDisponibles limites)  
  + superaLimites(accionesDisponibles): bool
  + sumarAPuntaje(Puntaje unPuntaje)
  + sumarAFichas(Fichas fichas)
}
class Descarte implements IAccion{
  - List<CartaDePoker> cartasDescartadas
  + Descarte(List<CartaDePoker> cartasDescartadas)
}
class Jugada implements IAccion{
  + Jugada(List<Carta> cartas)
  + aplicarTarots(List<Tarot> tarotsActivos)
  + calcularPuntaje() : PuntajeJugada
  + contieneCombinacion(CombinacionDePoker combinacion):bool
}

Class Tarot implements IMejorador{
    - nombre : string 
    - descripcion : string 
    + Tarot(nombre, descripcion, Efecto efecto, ICondicion condicion)
}

interface IMejorador {
  {abstract}+ mejorar( Mejorable mejorable)
}
interface IAccionMejorable {
  {abstract}+ aplicarEfecto(Efecto efecto)
  {abstract}+ contiene(Mejorable mejorable): bool
}
class Comodin implements IMejoradorDeAccion {
    - nombre : string 
    - descripcion : string
    + aplicarEfecto(Mejorable mejorable) :
    + Comodin(nombre, descripcion, IEfecto efecto, ICondicion condicion)
}
class Efecto{
    - puntos : Int
    - multiplicador: int 
    + sumarPuntaje(Puntaje puntaje): Puntaje
    + agregarEfecto(Efecto otroEfecto)
}
class Mejora{
  - puntos: int 
  - sumarMultiplicador : int
  - multMultiplicador : int 
  + setPuntos(int puntos):
  + setMultiplicador(int multiplicador)
  + seAplicaAPuntaje(Puntaje puntaje)
}
interface IMejoradorDeAccion{
  {abstract} + mejorar(IAccionMejorable)
}

class ActivarAlAzar implements ICondicion{
    - probabilidad: int 
    + ActivarAlAzar(int probabilidad)
}
class EsDescarte implements ICondicion{

}
class EsUnaJugada implements ICondicion{
}

interface ICondicion {
    {abstract}+ validarCondicion(Mejorable mejorable) : bool
}

class CombinacionDeComodines  implements IMejoradorDeAccion{
  + nombre : string 
  + descripcion : string 
  + CombinacionDeComodines(nombre, descripcion, List<Comodin>)
}

class RestriccionACarta implements ICondicion{
    + RestriccionACarta(String nombreDeLaCarta)
    - restriccion : string 
}
class RestriccionACombinacion implements ICondicion{
    - restriccion: Combinacion
}

interface Mejorable{
  {abstract}+ aplicarEfecto(Efecto efecto) 
  {abstract}+ esDeTipo(Mejorable mejorabl)
}

IAccionMejorable <.. IMejoradorDeAccion : conoce
CombinacionDePoker ..|> Mejorable 
CombinacionDeComodines o- "1..2" Comodin 
Mejora --o Tarot
Descarte ..|> IAccionMejorable
CartaDePoker ..|> Mejorable
Comodin o-- "1..*" ICondicion 
Mejora "1..*"  --o Comodin 
Jugada ..|> IAccionMejorable

Mejorable <.. IMejorador : conoce
Tarot o-- ICondicion
Jugada o- CombinacionDePoker
CombinacionDePoker o- CartaDePoker
Ronda o-- "0..*" IAccion
AccionesDisponibles -o Ronda 
Algo3Balatro o-- "*" Ronda
Tienda --o Ronda
Algo3Balatro o-- Jugador
Jugador o- Mazo
Jugador o-- Mano
Mano o-- "*" CartaDePoker
ITieneCartas <.. Mano : utiliza
Mazo ..|> ITieneCartas
Efecto o- Mejora
@enduml